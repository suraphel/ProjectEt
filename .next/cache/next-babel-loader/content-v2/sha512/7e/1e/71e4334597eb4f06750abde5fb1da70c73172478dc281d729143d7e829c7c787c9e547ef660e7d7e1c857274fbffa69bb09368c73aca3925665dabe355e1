{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"A:\\\\Projects\\\\NextJs\\\\Demo\\\\demo2\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\AuthForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n// // This page holds the signIn, signUp form, duration  and Authentication Api\n// import {useRef, useState, useContext } from 'react'\n// import AuthenticationContext from '../../Token/LogInAuthentication ';\n// import { useHistory } from 'react-router-dom'\n// import classes from '../../Token/AuthForm.module.css'\n// const LogIn = () =>{\n//     const usernameInputRef =  useRef();\n//     const passwordInputRef = useRef();\n//     const history = useHistory();\n//     const authen = useContext(AuthenticationContext);\n//     const [isLogin, setLogin]=useState();\n//     const [isLoading, setLoading] = useState();\n//     const switchHandler = () => {\n//         setLogin((prevState) => !prevState);\n//     }\n//     const submitHandler = (event) => {\n//         event.preventDefault();\n//         const enterdEmail = usernameInputRef.current.value;\n//         const enterdPassword = passwordInputRef.current.value;\n//         let url;\n//         if(isLogin){\n//             url ='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs';\n//             setLoading(true);\n//         }else {\n//             url ='https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs';\n//         }\n//         fetch(url, {\n//             method: 'POST',\n//             body: JSON.stringify({\n//                 email:enterdEmail,\n//                 password:enterdPassword,\n//                 returnSecureToken: true,\n//             }),\n//             headers:{\n//                 'Content-Type': 'application/json',\n//             }\n//         }).then(res => {\n//             setLoading(false);\n//              if(res.ok){\n//                 return res.json();\n//              }else {\n//                 return res.json().then(data => {\n//                     const errorMessage = data.error.message;\n//                     throw new Error(errorMessage);\n//                 });\n//             }\n//              // automatic time limit logout\n//         }).then(data => {\n//             const expirationTime = new Date((new Date().getTime() + (data.expiresIn * 1000)));\n//             authen.logIn(data.idToken, expirationTime.toISOString());\n//             history.replace('/');\n//         })\n//         .catch(err =>{\n//             alert(err.message);\n//         } )\n//     }\n//     return(\n//         <section>\n//         <h1>{isLogin ? 'Login' : 'Create Account'}</h1>\n//             <form onSubmit={submitHandler}>\n//                 <div className ={classes.control}>\n//                     <label htmlFor='email'>Your Email</label>\n//                     <input type='username' id='email' ref={usernameInputRef} />\n//                 </div>\n//                 <div className={classes.control}>\n//                     <label htmlFor='password'>Your Password</label>\n//                     <input type='password' id='password' ref={passwordInputRef} />\n//                 </div>\n//                 <div className ={classes.actions}>\n//                 {!isLoading && <button>{isLogin ? 'LogIn' : 'Create Account'}</button>}\n//                 {!isLoading && <p>Loading ...</p>}\n//                 <button\n//                     type='button'\n//                     className={classes.toggle}\n//                     onclick={switchHandler}>\n//                     {isLogin ? 'Create an Account' : 'Use Existing account'}\n//                 </button>\n//                 </div>\n//             </form>\n//         </section>\n//         );\n//         }\n// export default LogIn;\n//LogIn form and validation with firebase\nimport { useRef, useState, useContext } from \"react\";\nimport AuthenticationContext from \"../components/Token/LogInAuthentication \"; //  import { useHistory } from 'react-router-dom'\n\nimport classes from \"../components/userAccount/components/auth/AuthForm.module.css\"; // ./auth/AuthForm.module.css'\n// import classes from '../../Token/AuthForm.module.css'\n\nvar AuthForm = function AuthForm() {\n  _s();\n\n  var usernameInputRef = useRef();\n  var passwordInputRef = useRef(); // const history = useHistory();\n\n  var authCtx = useContext(AuthenticationContext); // validation here\n\n  var _useState = useState(true),\n      isLogin = _useState[0],\n      setIsLogin = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var switchAuthModeHandler = function switchAuthModeHandler() {\n    setIsLogin(function (prevState) {\n      return !prevState;\n    });\n  };\n\n  var submitHandler = function submitHandler(event) {\n    event.preventDefault();\n    var enteredEmail = usernameInputRef.current.value;\n    var enteredPassword = passwordInputRef.current.value;\n    var url;\n\n    if (isLogin) {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs\";\n      setLoading(true);\n    } else {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs\";\n    }\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(function (res) {\n      setLoading(false);\n\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(function (data) {\n          //console.log(data);\n          var errorM = data.error.message;\n          throw new Error(errorM); // if a problem look in here\n        });\n      } // Automatic logout based on time\n\n    }).then(function (data) {\n      var expirationTime = new Date(new Date().getTime() + +data.expiresIn * 1000);\n      authCtx.login(data.idToken, expirationTime.toISOString()); //  history.replace('/');\n      // Now the user is logged as he has received a tokken.\n      //console.log(data);\n    })[\"catch\"](function (err) {\n      //error source is built-in message form the firebase\n      alert(err.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 41\n        }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          ref: usernameInputRef,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 41\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 33\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 41\n        }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          ref: passwordInputRef,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 41\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 33\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n          children: isLogin ? \"Login\" : \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 49\n        }, _this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 55\n        }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: switchAuthModeHandler,\n          children: isLogin ? \"Create new account\" : \"Login with existing account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 41\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 33\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 17\n  }, _this);\n};\n\n_s(AuthForm, \"rGdII/F9569ALhMWXdLmAgHdbFo=\");\n\n_c = AuthForm;\nexport default AuthForm; // import React, { useState, useEffect, useRef, useContext } from 'react';\n// import { useHistory } from 'react-router-dom';\n// import Card from '../UI/Card/Card';\n// import classes from './Login.module.css';\n// import Button from '../UI/Button/Button';\n// import AuthenticationContext from '../../../Token/LogInAuthen';\n// // import AuthenticationContext from '../../Token/LogInAuthen'\n// const Login = (props) => {\n// \t\tconst userenterEmail = useRef();\n// \t\tconst userenterPassword = useRef();\n// \t\tconst [ enteredEmail, setEnteredEmail ] = useState('');\n// \t\tconst [ emailIsValid, setEmailIsValid ] = useState();\n// \t\tconst [ enteredPassword, setEnteredPassword ] = useState('');\n// \t\tconst [ passwordIsValid, setPasswordIsValid ] = useState();\n// \t\tconst [ formIsValid, setFormIsValid ] = useState(false);\n// \t\tconst [isLogin, setIsLogin] =useState(true);\n// \t\tconst [isLoading, setLoading] = useState(false);\n// \t\tconst authentication = useContext(AuthenticationContext);\n// \t\t  const history = useHistory();\n// \t\t  const switchAuthModeHandler = () => {\n//     \t   setIsLogin((prevState) => !prevState);\n//   };\n// \t\t// useEffect(\n// \t\t// \t() => {\n// \t\t// \t\tsetFormIsValid(enteredEmail.includes('@') && enteredPassword.trim().length > 6);\n// \t\t// \t},\n// \t\t// \t[ setFormIsValid, enteredEmail, enteredPassword ]\n// \t\t// );\n// \t\t// ------------------------------------------------------------------------------------------\n// \t\tconst createAccountHandler = (event) => {\n// \t\t\tevent.preventDefault();\n// \t\t\t// const email = userenterEmail.current.value;\n// \t\t\t// const password = userenterPassword.current.value;\n// \t\t\t// let url;\n// \t\t\t// const submitHandler = (event)=> {\n// \t\t\t// event.preventDefault();\n//     const enteredEmail = userenterEmail.current.value;\n//     const enteredPassword = userenterPassword.current.value;\n//     let url;\n//     if(isLogin){\n//       url  = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs';\n//    //setLoading(true);\n//     } else {\n//       url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs';\n//     }\n//     fetch(url,\n//     {\n//       method:'POST',\n//       body: JSON.stringify({\n//         email: enteredEmail,\n//         password: enteredPassword,\n//         returnSecureToken: true,\n//       }),\n//     headers:{\n//     'Content-Type': 'application/json',\n//      },\n//    }\n//    ).then(res => {\n//     setLoading(false);\n//     if(res.ok){\n//       return res.json();\n//     }else{\n//         return res.json().then(data => {\n//           //console.log(data);\n//          const errorM = data.error.message;\n//          throw new Error(errorM); // if a problem look in here\n//         });\n//       }\n//       // Automatic logout based on time\n//    }).then(data =>{\n//     const expirationTime = new Date((new Date().getTime() + ( +data.expiresIn * 1000)));\n//      authentication.login(data.idToken, expirationTime.toISOString());\n//     history.replace('/'); // Now the user is logged as he has received a tokken.\n//     //console.log(data);\n//    })\n//    .catch(err => {\n//      //error source is built-in message form the firebase\n//     alert(err.message);\n//    });\n//   };\n// \t\t\t//----------------------------------------\n// \t\t//  if(isLogin){\n// \t\t// \t //logging in\n// \t\t// \turl = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs';\n// \t\t//  }else{\n// \t\t// \t //signing up\n// \t\t// \t url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs';\n// \t\t// \t}\n// \t\t//  // const accountHandler = () => {\n// \t\t//  fetch(url,\n// \t\t// {\n// \t\t// \tmethod: 'POST',\n// \t\t// \tbody: JSON.stringify({\n// \t\t// \t\temail: email,\n// \t\t// \t\tpassword: password,\n// \t\t// \t\treturnSecureToken: true\n// \t\t// \t}),\n// \t\t// \theaders:{\n// \t\t// \t\t'Content-type' : 'application/json',\n// \t\t// \t},\n// \t\t//  }).then(async res => {\n// \t\t// \tif(res.ok){\n// \t\t// \t\treturn res.json();\n// \t\t// \t}else{\n// \t\t// \t\tconst data = await res.json();\n// \t\t// \t\tconst errorM = data.error.message;\n// \t\t// \t\tthrow new Error(errorM);\n// \t\t// \t}\n// \t\t//  })\n// \t\t//  .catch(err =>{\n// \t\t// \talert(err.message);\n// \t\t//  });\n// \t\t// }\n// \t\t//-------------------------------------------------------\n// \t\t// const passwordChangeHandler = (event) => {// }, [emailChangeHandler, passwordChangeHandler])\n// \tconst emailChangeHandler = (event) => {\n// \t\tsetEnteredEmail(event.target.value);\n// \t\tsetFormIsValid(event.target.value.includes('@') && enteredPassword.trim().length > 6);\n// \t};\n// \tconst passwordChangeHandler = (event) => {\n// \t\tsetEnteredPassword(event.target.value);\n// \t\tsetFormIsValid(event.target.value.trim().length > 6 && enteredEmail.includes('@'));\n// \t};\n// \tconst validateEmailHandler = () => {\n// \t\tsetEmailIsValid(enteredEmail.includes('@'));\n// \t};\n// \tconst validatePasswordHandler = () => {\n// \t\tsetPasswordIsValid(enteredPassword.trim().length > 6);\n// \t};\n// \t// const submitHandler = (event) => {\n// \t// \tevent.preventDefault();\n// \t// \tprops.onLogin(enteredEmail, enteredPassword);\n// \t// };\n// \treturn (\n// \t\t  <section className={classes.auth}>\n//     {/*option b/n login or signUp  */}\n//       <h1>{isLogin ? 'Login '  : 'what ever'}</h1>\n//       <form onSubmit={createAccountHandler}>\n//         <div className={classes.control}>\n//           <label htmlFor='email'>Your Email</label>\n//           <input type='email' id='email' ref={userenterEmail} required />\n//         </div>\n//         <div className={classes.control}>\n//           <label htmlFor='password'>Your Password</label>\n//           <input type='password' id='password' ref={userenterPassword} required />\n//         </div>\n//         <div className={classes.actions}>\n//           {!isLoading && <button>{isLogin ? 'Login' : 'Create Account'}</button>}\n//           {isLoading && <p>Loading...</p>}\n//           <button\n//             type='button'\n//             className={classes.toggle}\n//             onClick={switchAuthModeHandler}\n//           >\n//             {isLogin ? 'Create new account' : 'Login with existing account'}\n//           </button>\n//         </div>\n//       </form>\n//     </section>\n// \t\t// <Card className={classes.login}>\n// \t\t// \t<form onSubmit={createAccountHandler}>\n// \t\t// \t\t<div className={`${classes.control} ${emailIsValid === false ? classes.invalid : ''}`}>\n// \t\t// \t\t\t<label htmlFor=\"email\">E-Mail form2</label>\n// \t\t// \t\t\t<input\n// \t\t// \t\t\t\ttype=\"email\"\n// \t\t// \t\t\t\tid=\"email\"\n// \t\t// \t\t\t\tref={userenterEmail}\n// \t\t// \t\t\t\tvalue={enteredEmail}\n// \t\t// \t\t\t\tonChange={emailChangeHandler}\n// \t\t// \t\t\t\tonBlur={validateEmailHandler}\n// \t\t// \t\t\t/>\n// \t\t// \t\t</div>\n// \t\t// \t\t<div\n// \t\t// \t\t\tclassName={`${classes.control} ${passwordIsValid === false\n// \t\t// \t\t\t\t? classes.invalid\n// \t\t// \t\t\t\t: ''}`}\n// \t\t// \t\t>\n// \t\t// \t\t\t<label htmlFor=\"password\">Password</label>\n// \t\t// \t\t\t<input\n// \t\t// \t\t\t\ttype=\"password\"\n// \t\t// \t\t\t\tid=\"password\"\n// \t\t// \t\t\t\tref= {userenterPassword}\n// \t\t// \t\t\t\tvalue={enteredPassword}\n// \t\t// \t\t\t\tonChange={passwordChangeHandler}\n// \t\t// \t\t\t\tonBlur={validatePasswordHandler}\n// \t\t// \t\t\t/>\n// \t\t// \t\t</div>\n// \t\t// \t\t<div className={classes.actions}>\n// \t\t// \t\t\t<Button\n// \t\t// \t\t\t\ttype=\"submit\"\n// \t\t// \t\t\t\tclassName={classes.btn}\n// \t\t// \t\t\t\tdisabled={!formIsValid} // deactivate until verified\n// \t\t// \t\t\t> Login </Button>\n// \t\t// \t\t\t<button onClick = {createAccountHandler}> Create an account</button>\n// \t\t// \t\t</div>\n// \t\t// \t</form>\n// \t\t// </Card>\n// \t);\n// };\n// export default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["A:/Projects/NextJs/Demo/demo2/06-onwards-to-a-bigger-project-starting-project/pages/AuthForm.js"],"names":["useRef","useState","useContext","AuthenticationContext","classes","AuthForm","usernameInputRef","passwordInputRef","authCtx","isLogin","setIsLogin","isLoading","setLoading","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","url","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","data","errorM","error","message","Error","expirationTime","Date","getTime","expiresIn","login","idToken","toISOString","err","alert","auth","control","actions","toggle"],"mappings":"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":["// // This page holds the signIn, signUp form, duration  and Authentication Api\r\n\r\n// import {useRef, useState, useContext } from 'react'\r\n// import AuthenticationContext from '../../Token/LogInAuthentication ';\r\n// import { useHistory } from 'react-router-dom'\r\n// import classes from '../../Token/AuthForm.module.css'\r\n\r\n// const LogIn = () =>{\r\n//     const usernameInputRef =  useRef();\r\n//     const passwordInputRef = useRef();\r\n//     const history = useHistory();\r\n\r\n//     const authen = useContext(AuthenticationContext);\r\n\r\n//     const [isLogin, setLogin]=useState();\r\n//     const [isLoading, setLoading] = useState();\r\n\r\n//     const switchHandler = () => {\r\n//         setLogin((prevState) => !prevState);\r\n//     }\r\n\r\n//     const submitHandler = (event) => {\r\n//         event.preventDefault();\r\n\r\n//         const enterdEmail = usernameInputRef.current.value;\r\n//         const enterdPassword = passwordInputRef.current.value;\r\n\r\n//         let url;\r\n\r\n//         if(isLogin){\r\n//             url ='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs';\r\n\r\n//             setLoading(true);\r\n//         }else {\r\n//             url ='https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs';\r\n//         }\r\n//         fetch(url, {\r\n//             method: 'POST',\r\n//             body: JSON.stringify({\r\n//                 email:enterdEmail,\r\n//                 password:enterdPassword,\r\n//                 returnSecureToken: true,\r\n//             }),\r\n//             headers:{\r\n//                 'Content-Type': 'application/json',\r\n//             }\r\n//         }).then(res => {\r\n//             setLoading(false);\r\n//              if(res.ok){\r\n//                 return res.json();\r\n//              }else {\r\n//                 return res.json().then(data => {\r\n//                     const errorMessage = data.error.message;\r\n//                     throw new Error(errorMessage);\r\n//                 });\r\n//             }\r\n//              // automatic time limit logout\r\n//         }).then(data => {\r\n//             const expirationTime = new Date((new Date().getTime() + (data.expiresIn * 1000)));\r\n//             authen.logIn(data.idToken, expirationTime.toISOString());\r\n//             history.replace('/');\r\n\r\n//         })\r\n//         .catch(err =>{\r\n//             alert(err.message);\r\n//         } )\r\n//     }\r\n\r\n//     return(\r\n//         <section>\r\n//         <h1>{isLogin ? 'Login' : 'Create Account'}</h1>\r\n//             <form onSubmit={submitHandler}>\r\n//                 <div className ={classes.control}>\r\n//                     <label htmlFor='email'>Your Email</label>\r\n//                     <input type='username' id='email' ref={usernameInputRef} />\r\n//                 </div>\r\n\r\n//                 <div className={classes.control}>\r\n//                     <label htmlFor='password'>Your Password</label>\r\n//                     <input type='password' id='password' ref={passwordInputRef} />\r\n//                 </div>\r\n\r\n//                 <div className ={classes.actions}>\r\n//                 {!isLoading && <button>{isLogin ? 'LogIn' : 'Create Account'}</button>}\r\n//                 {!isLoading && <p>Loading ...</p>}\r\n//                 <button\r\n//                     type='button'\r\n//                     className={classes.toggle}\r\n//                     onclick={switchHandler}>\r\n//                     {isLogin ? 'Create an Account' : 'Use Existing account'}\r\n//                 </button>\r\n//                 </div>\r\n//             </form>\r\n//         </section>\r\n//         );\r\n//         }\r\n\r\n// export default LogIn;\r\n\r\n//LogIn form and validation with firebase\r\n\r\nimport { useRef, useState, useContext } from \"react\";\r\nimport AuthenticationContext from \"../components/Token/LogInAuthentication \";\r\n\r\n//  import { useHistory } from 'react-router-dom'\r\nimport classes from \"../components/userAccount/components/auth/AuthForm.module.css\";\r\n// ./auth/AuthForm.module.css'\r\n// import classes from '../../Token/AuthForm.module.css'\r\n\r\nconst AuthForm = () => {\r\n        const usernameInputRef = useRef();\r\n        const passwordInputRef = useRef();\r\n        // const history = useHistory();\r\n\r\n        const authCtx = useContext(AuthenticationContext);\r\n        // validation here\r\n        const [isLogin, setIsLogin] = useState(true);\r\n        const [isLoading, setLoading] = useState(false);\r\n\r\n        const switchAuthModeHandler = () => {\r\n                setIsLogin((prevState) => !prevState);\r\n        };\r\n\r\n        const submitHandler = (event) => {\r\n                event.preventDefault();\r\n\r\n                const enteredEmail = usernameInputRef.current.value;\r\n                const enteredPassword = passwordInputRef.current.value;\r\n\r\n                let url;\r\n\r\n                if (isLogin) {\r\n                        url =\r\n                                \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs\";\r\n                        setLoading(true);\r\n                } else {\r\n                        url =\r\n                                \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs\";\r\n                }\r\n                fetch(url, {\r\n                        method: \"POST\",\r\n                        body: JSON.stringify({\r\n                                email: enteredEmail,\r\n                                password: enteredPassword,\r\n                                returnSecureToken: true,\r\n                        }),\r\n                        headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                        },\r\n                })\r\n                        .then((res) => {\r\n                                setLoading(false);\r\n                                if (res.ok) {\r\n                                        return res.json();\r\n                                } else {\r\n                                        return res.json().then((data) => {\r\n                                                //console.log(data);\r\n                                                const errorM =\r\n                                                        data.error.message;\r\n                                                throw new Error(errorM); // if a problem look in here\r\n                                        });\r\n                                }\r\n                                // Automatic logout based on time\r\n                        })\r\n                        .then((data) => {\r\n                                const expirationTime = new Date(\r\n                                        new Date().getTime() +\r\n                                                +data.expiresIn * 1000\r\n                                );\r\n                                authCtx.login(\r\n                                        data.idToken,\r\n                                        expirationTime.toISOString()\r\n                                );\r\n                                //  history.replace('/');\r\n                                // Now the user is logged as he has received a tokken.\r\n                                //console.log(data);\r\n                        })\r\n                        .catch((err) => {\r\n                                //error source is built-in message form the firebase\r\n                                alert(err.message);\r\n                        });\r\n        };\r\n\r\n        return (\r\n                <section className={classes.auth}>\r\n                        {/*option b/n login or signUp  */}\r\n                        <form onSubmit={submitHandler}>\r\n                                <div className={classes.control}>\r\n                                        <label htmlFor=\"email\">\r\n                                                Your Email\r\n                                        </label>\r\n                                        <input\r\n                                                type=\"email\"\r\n                                                id=\"email\"\r\n                                                ref={usernameInputRef}\r\n                                                required\r\n                                        />\r\n                                </div>\r\n\r\n                                <div className={classes.control}>\r\n                                        <label htmlFor=\"password\">\r\n                                                Your Password\r\n                                        </label>\r\n                                        <input\r\n                                                type=\"password\"\r\n                                                id=\"password\"\r\n                                                ref={passwordInputRef}\r\n                                                required\r\n                                        />\r\n                                </div>\r\n\r\n                                <div className={classes.actions}>\r\n                                        {!isLoading && (\r\n                                                <button>\r\n                                                        {isLogin\r\n                                                                ? \"Login\"\r\n                                                                : \"Create Account\"}\r\n                                                </button>\r\n                                        )}\r\n                                        {isLoading && <p>Loading...</p>}\r\n\r\n                                        <button\r\n                                                type=\"button\"\r\n                                                className={classes.toggle}\r\n                                                onClick={switchAuthModeHandler}\r\n                                        >\r\n                                                {isLogin\r\n                                                        ? \"Create new account\"\r\n                                                        : \"Login with existing account\"}\r\n                                        </button>\r\n                                </div>\r\n                        </form>\r\n                </section>\r\n        );\r\n};\r\n\r\nexport default AuthForm;\r\n\r\n// import React, { useState, useEffect, useRef, useContext } from 'react';\r\n// import { useHistory } from 'react-router-dom';\r\n\r\n// import Card from '../UI/Card/Card';\r\n// import classes from './Login.module.css';\r\n// import Button from '../UI/Button/Button';\r\n// import AuthenticationContext from '../../../Token/LogInAuthen';\r\n\r\n// // import AuthenticationContext from '../../Token/LogInAuthen'\r\n\r\n// const Login = (props) => {\r\n\r\n// \t\tconst userenterEmail = useRef();\r\n// \t\tconst userenterPassword = useRef();\r\n\r\n// \t\tconst [ enteredEmail, setEnteredEmail ] = useState('');\r\n// \t\tconst [ emailIsValid, setEmailIsValid ] = useState();\r\n// \t\tconst [ enteredPassword, setEnteredPassword ] = useState('');\r\n// \t\tconst [ passwordIsValid, setPasswordIsValid ] = useState();\r\n\r\n// \t\tconst [ formIsValid, setFormIsValid ] = useState(false);\r\n\r\n// \t\tconst [isLogin, setIsLogin] =useState(true);\r\n// \t\tconst [isLoading, setLoading] = useState(false);\r\n\r\n// \t\tconst authentication = useContext(AuthenticationContext);\r\n// \t\t  const history = useHistory();\r\n\r\n// \t\t  const switchAuthModeHandler = () => {\r\n//     \t   setIsLogin((prevState) => !prevState);\r\n//   };\r\n\r\n// \t\t// useEffect(\r\n// \t\t// \t() => {\r\n// \t\t// \t\tsetFormIsValid(enteredEmail.includes('@') && enteredPassword.trim().length > 6);\r\n// \t\t// \t},\r\n// \t\t// \t[ setFormIsValid, enteredEmail, enteredPassword ]\r\n// \t\t// );\r\n// \t\t// ------------------------------------------------------------------------------------------\r\n// \t\tconst createAccountHandler = (event) => {\r\n// \t\t\tevent.preventDefault();\r\n\r\n// \t\t\t// const email = userenterEmail.current.value;\r\n// \t\t\t// const password = userenterPassword.current.value;\r\n// \t\t\t// let url;\r\n// \t\t\t// const submitHandler = (event)=> {\r\n// \t\t\t// event.preventDefault();\r\n\r\n//     const enteredEmail = userenterEmail.current.value;\r\n//     const enteredPassword = userenterPassword.current.value;\r\n\r\n//     let url;\r\n\r\n//     if(isLogin){\r\n//       url  = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs';\r\n\r\n//    //setLoading(true);\r\n//     } else {\r\n//       url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs';\r\n//     }\r\n//     fetch(url,\r\n//     {\r\n//       method:'POST',\r\n//       body: JSON.stringify({\r\n//         email: enteredEmail,\r\n//         password: enteredPassword,\r\n//         returnSecureToken: true,\r\n//       }),\r\n//     headers:{\r\n//     'Content-Type': 'application/json',\r\n//      },\r\n//    }\r\n//    ).then(res => {\r\n//     setLoading(false);\r\n//     if(res.ok){\r\n//       return res.json();\r\n//     }else{\r\n//         return res.json().then(data => {\r\n//           //console.log(data);\r\n//          const errorM = data.error.message;\r\n//          throw new Error(errorM); // if a problem look in here\r\n//         });\r\n//       }\r\n//       // Automatic logout based on time\r\n//    }).then(data =>{\r\n//     const expirationTime = new Date((new Date().getTime() + ( +data.expiresIn * 1000)));\r\n//      authentication.login(data.idToken, expirationTime.toISOString());\r\n//     history.replace('/'); // Now the user is logged as he has received a tokken.\r\n//     //console.log(data);\r\n//    })\r\n//    .catch(err => {\r\n//      //error source is built-in message form the firebase\r\n//     alert(err.message);\r\n//    });\r\n//   };\r\n\r\n// \t\t\t//----------------------------------------\r\n// \t\t//  if(isLogin){\r\n// \t\t// \t //logging in\r\n// \t\t// \turl = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs';\r\n// \t\t//  }else{\r\n// \t\t// \t //signing up\r\n// \t\t// \t url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBILHtgI_IbbZADrPf-oTa-3nJPvIL4qSs';\r\n// \t\t// \t}\r\n// \t\t//  // const accountHandler = () => {\r\n// \t\t//  fetch(url,\r\n// \t\t// {\r\n// \t\t// \tmethod: 'POST',\r\n// \t\t// \tbody: JSON.stringify({\r\n// \t\t// \t\temail: email,\r\n// \t\t// \t\tpassword: password,\r\n// \t\t// \t\treturnSecureToken: true\r\n// \t\t// \t}),\r\n// \t\t// \theaders:{\r\n// \t\t// \t\t'Content-type' : 'application/json',\r\n// \t\t// \t},\r\n// \t\t//  }).then(async res => {\r\n// \t\t// \tif(res.ok){\r\n// \t\t// \t\treturn res.json();\r\n// \t\t// \t}else{\r\n// \t\t// \t\tconst data = await res.json();\r\n// \t\t// \t\tconst errorM = data.error.message;\r\n// \t\t// \t\tthrow new Error(errorM);\r\n// \t\t// \t}\r\n// \t\t//  })\r\n// \t\t//  .catch(err =>{\r\n// \t\t// \talert(err.message);\r\n// \t\t//  });\r\n// \t\t// }\r\n// \t\t//-------------------------------------------------------\r\n\r\n// \t\t// const passwordChangeHandler = (event) => {// }, [emailChangeHandler, passwordChangeHandler])\r\n\r\n// \tconst emailChangeHandler = (event) => {\r\n// \t\tsetEnteredEmail(event.target.value);\r\n// \t\tsetFormIsValid(event.target.value.includes('@') && enteredPassword.trim().length > 6);\r\n// \t};\r\n\r\n// \tconst passwordChangeHandler = (event) => {\r\n// \t\tsetEnteredPassword(event.target.value);\r\n// \t\tsetFormIsValid(event.target.value.trim().length > 6 && enteredEmail.includes('@'));\r\n// \t};\r\n\r\n// \tconst validateEmailHandler = () => {\r\n// \t\tsetEmailIsValid(enteredEmail.includes('@'));\r\n// \t};\r\n\r\n// \tconst validatePasswordHandler = () => {\r\n// \t\tsetPasswordIsValid(enteredPassword.trim().length > 6);\r\n// \t};\r\n\r\n// \t// const submitHandler = (event) => {\r\n// \t// \tevent.preventDefault();\r\n// \t// \tprops.onLogin(enteredEmail, enteredPassword);\r\n// \t// };\r\n\r\n// \treturn (\r\n// \t\t  <section className={classes.auth}>\r\n//     {/*option b/n login or signUp  */}\r\n//       <h1>{isLogin ? 'Login '  : 'what ever'}</h1>\r\n//       <form onSubmit={createAccountHandler}>\r\n//         <div className={classes.control}>\r\n//           <label htmlFor='email'>Your Email</label>\r\n//           <input type='email' id='email' ref={userenterEmail} required />\r\n//         </div>\r\n//         <div className={classes.control}>\r\n//           <label htmlFor='password'>Your Password</label>\r\n//           <input type='password' id='password' ref={userenterPassword} required />\r\n//         </div>\r\n//         <div className={classes.actions}>\r\n//           {!isLoading && <button>{isLogin ? 'Login' : 'Create Account'}</button>}\r\n//           {isLoading && <p>Loading...</p>}\r\n//           <button\r\n//             type='button'\r\n//             className={classes.toggle}\r\n//             onClick={switchAuthModeHandler}\r\n//           >\r\n//             {isLogin ? 'Create new account' : 'Login with existing account'}\r\n//           </button>\r\n//         </div>\r\n//       </form>\r\n//     </section>\r\n// \t\t// <Card className={classes.login}>\r\n// \t\t// \t<form onSubmit={createAccountHandler}>\r\n// \t\t// \t\t<div className={`${classes.control} ${emailIsValid === false ? classes.invalid : ''}`}>\r\n// \t\t// \t\t\t<label htmlFor=\"email\">E-Mail form2</label>\r\n// \t\t// \t\t\t<input\r\n// \t\t// \t\t\t\ttype=\"email\"\r\n// \t\t// \t\t\t\tid=\"email\"\r\n// \t\t// \t\t\t\tref={userenterEmail}\r\n// \t\t// \t\t\t\tvalue={enteredEmail}\r\n// \t\t// \t\t\t\tonChange={emailChangeHandler}\r\n// \t\t// \t\t\t\tonBlur={validateEmailHandler}\r\n// \t\t// \t\t\t/>\r\n// \t\t// \t\t</div>\r\n// \t\t// \t\t<div\r\n// \t\t// \t\t\tclassName={`${classes.control} ${passwordIsValid === false\r\n// \t\t// \t\t\t\t? classes.invalid\r\n// \t\t// \t\t\t\t: ''}`}\r\n// \t\t// \t\t>\r\n// \t\t// \t\t\t<label htmlFor=\"password\">Password</label>\r\n// \t\t// \t\t\t<input\r\n// \t\t// \t\t\t\ttype=\"password\"\r\n// \t\t// \t\t\t\tid=\"password\"\r\n// \t\t// \t\t\t\tref= {userenterPassword}\r\n// \t\t// \t\t\t\tvalue={enteredPassword}\r\n// \t\t// \t\t\t\tonChange={passwordChangeHandler}\r\n// \t\t// \t\t\t\tonBlur={validatePasswordHandler}\r\n// \t\t// \t\t\t/>\r\n// \t\t// \t\t</div>\r\n// \t\t// \t\t<div className={classes.actions}>\r\n// \t\t// \t\t\t<Button\r\n// \t\t// \t\t\t\ttype=\"submit\"\r\n// \t\t// \t\t\t\tclassName={classes.btn}\r\n// \t\t// \t\t\t\tdisabled={!formIsValid} // deactivate until verified\r\n// \t\t// \t\t\t> Login </Button>\r\n\r\n// \t\t// \t\t\t<button onClick = {createAccountHandler}> Create an account</button>\r\n\r\n// \t\t// \t\t</div>\r\n// \t\t// \t</form>\r\n// \t\t// </Card>\r\n// \t);\r\n// };\r\n\r\n// export default Login;\r\n"]},"metadata":{},"sourceType":"module"}